#!/bin/sh

# Prints a warning message about this script
warn() {
	echo "Warning: this script generates a simple openvpn config that redirects all client traffic through the server"
	echo "Server config will be generated and one client config will be available"
	echo "This script is not meant to provide a fully configured (nor safe) VPN config, it's made to deploy a basic VPN in a flash"
	echo "Note that the vars file should be edited BEFORE using this script"
	echo "Also, this script requires sudo"
	echo "\nPress any key to continue"
	read foo
	echo "\n"
}

# "Pack" the server files (files from easyrsa/keys, conf, run script...) into one dir
pack_server() {
	cd easyrsa/keys

	# Copy the files required by the server to its directory
	cp ca.crt ca.key server.crt server.key dh2048.pem ../../server

	cd ../../server

	if ! [ -f server.conf ]
	then
		# Pull sample config file
		cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz .
		gunzip server.conf.gz

		# Change server.conf to fit dh parameters
		sed -e 's/dh1024.pem/dh2048.pem/g' -i server.conf

		# Add config to server to allow routing all the traffic from clients
		echo 'push "redirect-gateway local def1"' >> server.conf
		echo 'push "dhcp-option DNS 8.8.8.8"' >> server.conf
		echo 'crl-verify crl.pem' >> server.conf

		# Build startup script for server
		# Does: allow IP forwarding, allow traffic routing
		echo 'sudo sysctl -w net.ipv4.ip_forward=1' >> run.sh
		echo 'sudo iptables -I FORWARD -i tun0 -o eth0 -s 10.8.0.0/24 -m conntrack --ctstate NEW -j ACCEPT' >> run.sh
		echo 'sudo iptables -I FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT' >> run.sh
		echo 'sudo iptables -t nat -I POSTROUTING -o eth0 -s 10.8.0.0/24 -j MASQUERADE' >> run.sh
		echo 'sudo openvpn server.conf' >> run.sh
		chmod +x run.sh
	fi

	cd ..
}

# "Pack" a client files (files from easyrsa/keys, conf) into one dir and zip it
pack_client() {
	cd easyrsa/keys

	# Copy the files required by the client to its directory
	cp ca.crt "$1.crt" "$1.key" "../../clients/$1"

	cd "../../clients/$1"

	# Pull sample config file
	cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf "$1.conf"

	# Sets the local IP address of the server as remote address for the client
	sed -e 's/my-server-1/'"$(hostname -I | cut -d ' ' -f 1)"'/' -i "$1.conf"

	# Sets the client certificate and key fields
	sed -e 's/client.crt/'"$1"'.crt/' -i "$1.conf"
	sed -e 's/client.key/'"$1"'.key/' -i "$1.conf"

	# Copy of the client conf file with a .ovpn extension (for Windows users)
	cp "$1.conf" "$1.ovpn"

	cd ..

	zip -r "$1.zip" "$1"
	
	cd ..
}

# Initlialize VPN (creates server and one client conf)
init() {
	# Check if the current dir does not contain a VPN configuration already
	if [ -d server -o -d client -o -d easyrsa ]
	then
		echo "This directory seems populated, aborting..."
		exit 1
	fi

	warn

	# Check for easy-rsa in /usr/share
	if ! [ -d "/usr/share/easy-rsa" ]
	then
		echo "easy-rsa not found in /usr/share"
		exit 1
		# TODO: ask for alternative dir
	fi

	# Pull easy-rsa from /usr/share and prepare directories
	cp -r /usr/share/easy-rsa easyrsa
	mkdir server
	mkdir -p clients/default

	cd easyrsa

	# Check for the easy-rsa binaries
	if ! [ -f vars -a -x build-ca -a -x build-key-server -a -x build-key -a -x build-dh ]
	then
		echo "Specified easy-rsa dir is invalid"
		exit 1
	fi

	# Generate keys and certs
	. ./vars
	./clean-all
	./build-ca
	./build-key-server server
	./build-key default
	./build-dh

	cd ..

	pack_server
	pack_client default
}

# Generates files for a new client
new_client() {
	if ! [ "$1" ]
	then
		echo "Please provide a name for the new client"
		exit 1
	fi

	mkdir "clients/$1"

	cd easyrsa

	. ./vars
	./build-key "$1"

	cd ..

	pack_server
	pack_client "$1"
}

# Revokes a client certificate
revoke_client() {
	if ! [ "$1" ]
	then
		echo "Please provide the name of the client to revoke"
		exit 1
	fi

	cd easyrsa

	. ./vars
	./revoke-full "$1"

	cd ..

	pack_server
	cp easyrsa/keys/crl.pem server

	if ! [ -d revoked ]
	then
		mkdir revoked
	fi

	mv "clients/$1" revoked
	rm "clients/$1.zip"
}

case "$1" in
	-c) new_client "$2";;
	-r) revoke_client "$2";;
	*) init;;
esac

exit 0
